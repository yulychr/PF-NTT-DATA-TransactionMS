/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.model.ModelApiResponse;
import com.example.demo.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-02T02:37:50.172028800-05:00[America/Lima]")
@Validated
@Api(value = "transacciones", description = "the transacciones API")
public interface TransaccionesApi {

    default TransaccionesApiDelegate getDelegate() {
        return new TransaccionesApiDelegate() {};
    }

    /**
     * GET /transacciones/historial : Retrieve transaction history
     * This endpoint returns the list of all transactions in the system.
     *
     * @return A list of transactions (status code 200)
     */
    @ApiOperation(value = "Retrieve transaction history", nickname = "getTransactionHistory", notes = "This endpoint returns the list of all transactions in the system.", response = Transaction.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of transactions", response = Transaction.class, responseContainer = "List") })
    @GetMapping(
        value = "/transacciones/historial",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Transaction>> getTransactionHistory() {
        return getDelegate().getTransactionHistory();
    }


    /**
     * POST /transacciones/deposito/{accountNumber}/ : Register a deposit to an account
     * Registers a deposit to a specific account identified by the account number.
     *
     * @param accountNumber The account number where the deposit will be made. (required)
     * @param amount The amount of money to deposit. (required)
     * @return Deposit successfully registered (status code 200)
     *         or Account with number \&quot;accountNumber\&quot; not found. (status code 404)
     *         or Bad request due to invalid data. (status code 400)
     */
    @ApiOperation(value = "Register a deposit to an account", nickname = "registerDeposit", notes = "Registers a deposit to a specific account identified by the account number.", response = Transaction.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deposit successfully registered", response = Transaction.class),
        @ApiResponse(code = 404, message = "Account with number \"accountNumber\" not found."),
        @ApiResponse(code = 400, message = "Bad request due to invalid data.", response = ModelApiResponse.class) })
    @PostMapping(
        value = "/transacciones/deposito/{accountNumber}/",
        produces = { "application/json" }
    )
    default ResponseEntity<Transaction> registerDeposit(@ApiParam(value = "The account number where the deposit will be made.",required=true) @PathVariable("accountNumber") String accountNumber,@NotNull @ApiParam(value = "The amount of money to deposit.", required = true) @Valid @RequestParam(value = "amount", required = true) Double amount) {
        return getDelegate().registerDeposit(accountNumber, amount);
    }


    /**
     * POST /transacciones/transferencia/ : Register a money transfer between two accounts
     * Registers a money transfer from a source account to a destination account.
     *
     * @param sourceAccount The source account number from which the transfer will be made. (required)
     * @param destinationAccount The destination account number where the transfer will be received. (required)
     * @param amount The amount of money to transfer. (required)
     * @return Withdrawal successfully registered (status code 200)
     *         or Bad request due to invalid data. (status code 400)
     *         or One or both accounts not found. (status code 404)
     */
    @ApiOperation(value = "Register a money transfer between two accounts", nickname = "registerTransfer", notes = "Registers a money transfer from a source account to a destination account.", response = Transaction.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Withdrawal successfully registered", response = Transaction.class),
        @ApiResponse(code = 400, message = "Bad request due to invalid data.", response = ModelApiResponse.class),
        @ApiResponse(code = 404, message = "One or both accounts not found.", response = ModelApiResponse.class) })
    @PostMapping(
        value = "/transacciones/transferencia/",
        produces = { "application/json" }
    )
    default ResponseEntity<Transaction> registerTransfer(@NotNull @ApiParam(value = "The source account number from which the transfer will be made.", required = true) @Valid @RequestParam(value = "sourceAccount", required = true) String sourceAccount,@NotNull @ApiParam(value = "The destination account number where the transfer will be received.", required = true) @Valid @RequestParam(value = "destinationAccount", required = true) String destinationAccount,@NotNull @ApiParam(value = "The amount of money to transfer.", required = true) @Valid @RequestParam(value = "amount", required = true) Double amount) {
        return getDelegate().registerTransfer(sourceAccount, destinationAccount, amount);
    }


    /**
     * POST /transacciones/retiro/{accountNumber}/ : Register a withdrawal from an account
     * Registers a withdrawal from a specific account identified by the account number. number.
     *
     * @param accountNumber The account number from which the withdrawal will be made. (required)
     * @param amount The amount of money to withdraw. (required)
     * @return Withdrawal successfully registered (status code 200)
     *         or Account with number \&quot; accountNumber \&quot; not found.. (status code 404)
     *         or Bad request due to invalid data. (status code 400)
     *         or Withdrawal amount exceeds available balance. (status code 422)
     */
    @ApiOperation(value = "Register a withdrawal from an account", nickname = "registerWithdrawal", notes = "Registers a withdrawal from a specific account identified by the account number. number.", response = Transaction.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Withdrawal successfully registered", response = Transaction.class),
        @ApiResponse(code = 404, message = "Account with number \" accountNumber \" not found.."),
        @ApiResponse(code = 400, message = "Bad request due to invalid data.", response = ModelApiResponse.class),
        @ApiResponse(code = 422, message = "Withdrawal amount exceeds available balance.", response = ModelApiResponse.class) })
    @PostMapping(
        value = "/transacciones/retiro/{accountNumber}/",
        produces = { "application/json" }
    )
    default ResponseEntity<Transaction> registerWithdrawal(@ApiParam(value = "The account number from which the withdrawal will be made.",required=true) @PathVariable("accountNumber") String accountNumber,@NotNull @ApiParam(value = "The amount of money to withdraw.", required = true) @Valid @RequestParam(value = "amount", required = true) Double amount) {
        return getDelegate().registerWithdrawal(accountNumber, amount);
    }

}
